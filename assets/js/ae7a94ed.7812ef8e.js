"use strict";(self.webpackChunkdifranca=self.webpackChunkdifranca||[]).push([[684],{840:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>h});var r=n(5893),s=n(1151),i=n(4866),a=n(5162);const c={keywords:["cheat","sheet","cheatsheet","cheats","devsecops","git"],slug:"/cheats/devsecops/git",title:"Git | DevSecOps | Cheat Sheets | Tech-Notes",sidebar_label:"Git Cheats"},o="Git Cheats",l={id:"cheats/DevSecOps/git",title:"Git | DevSecOps | Cheat Sheets | Tech-Notes",description:"Cheat sheet for Git commands.",source:"@site/docs/tech/cheats/DevSecOps/git.md",sourceDirName:"cheats/DevSecOps",slug:"/cheats/devsecops/git",permalink:"/tech-notes/cheats/devsecops/git",draft:!1,unlisted:!1,editUrl:"https://github.com/difranca/difranca.github.io/blob/main/docs/tech/cheats/DevSecOps/git.md",tags:[],version:"current",frontMatter:{keywords:["cheat","sheet","cheatsheet","cheats","devsecops","git"],slug:"/cheats/devsecops/git",title:"Git | DevSecOps | Cheat Sheets | Tech-Notes",sidebar_label:"Git Cheats"},sidebar:"tech",previous:{title:"Cheat Sheets",permalink:"/tech-notes/cheats"},next:{title:"Kubectl Cheats",permalink:"/tech-notes/cheats/kubernetes/kubectl"}},d={},h=[{value:"Config",id:"config",level:2},{value:"Setup",id:"setup",level:2},{value:"Stage &amp; Changes",id:"stage--changes",level:2},{value:"Branch",id:"branch",level:2},{value:"Log &amp; Compare",id:"log--compare",level:2},{value:"Update",id:"update",level:2},{value:"Rewrite",id:"rewrite",level:2},{value:"Temporary",id:"temporary",level:2},{value:"GitHub",id:"github",level:2}];function m(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"git-cheats",children:"Git Cheats"}),"\n",(0,r.jsx)(t.p,{children:"Cheat sheet for Git commands."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["This page was automatically generated from a navi cheat file available at ",(0,r.jsx)(t.a,{href:"https://github.com/difranca/navi-cheats",children:(0,r.jsx)(t.strong,{children:"difranca/navi-cheats"})}),".",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.strong,{children:"Navi"})," is an interactive cheatsheet tool for the command-line. To learn more about it, visit ",(0,r.jsx)(t.a,{href:"https://github.com/denisidoro/navi",children:(0,r.jsx)(t.strong,{children:"denisidoro/navi"})}),"."]})}),"\n",(0,r.jsxs)(i.Z,{className:"unique-tabs",children:[(0,r.jsxs)(a.Z,{value:"Table Formatted",default:!0,children:[(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"config",children:"Config"}),(0,r.jsx)(t.p,{children:"Configure Git across all local repositories."}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git config --global user.name {name}"})}),(0,r.jsx)(t.td,{children:"Set global Git user name"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git config --global user.email {email}"})}),(0,r.jsx)(t.td,{children:"Set global Git user email"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git config --global color.ui auto"})}),(0,r.jsx)(t.td,{children:"Set automatic Git CLI coloring"})]})]})]}),(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"setup",children:"Setup"}),(0,r.jsx)(t.p,{children:"Initialize and clone repositories."}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git init"})}),(0,r.jsx)(t.td,{children:"Initialize a Git repository"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git clone {repository}"})}),(0,r.jsx)(t.td,{children:"Clone a Git repository default branch to current directory"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git clone -b {branch_name} {repository} {clone_directory}"})}),(0,r.jsx)(t.td,{children:"Clone a Git repository branch"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git rev-parse --show-toplevel"})}),(0,r.jsx)(t.td,{children:"Get local repository top level directory"})]})]})]}),(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"stage--changes",children:"Stage & Changes"}),(0,r.jsx)(t.p,{children:"Work with stage and unstaged changes."}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git status"})}),(0,r.jsx)(t.td,{children:"Show modified and staged files"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git add ."})}),(0,r.jsx)(t.td,{children:"Stage all files"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git add {file}"})}),(0,r.jsx)(t.td,{children:"Stage a file"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git reset {file}"})}),(0,r.jsx)(t.td,{children:"Unstage a file"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git reset ."})}),(0,r.jsx)(t.td,{children:"Unstage all files"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git diff"})}),(0,r.jsx)(t.td,{children:"Show diff of unstaged files"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git diff --staged"})}),(0,r.jsx)(t.td,{children:"Show diff of staged files"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git commit -m {message}"})}),(0,r.jsx)(t.td,{children:"Commit staged changes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:'git commit --date="{date}" -m "{message}"'})}),(0,r.jsx)(t.td,{children:"Commit staged changes modifying the author date"})]})]})]}),(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"branch",children:"Branch"}),(0,r.jsx)(t.p,{children:"Work with branches"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git branch"})}),(0,r.jsx)(t.td,{children:"List branches"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git branch {name}"})}),(0,r.jsx)(t.td,{children:"Create a new branch at the current commit"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git checkout {branch}"})}),(0,r.jsx)(t.td,{children:"Switch to another branch"})]})]})]}),(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"log--compare",children:"Log & Compare"}),(0,r.jsx)(t.p,{children:"View logs and diffs in branches."}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git log"})}),(0,r.jsx)(t.td,{children:"Show commit history for active branch"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git log {branch}..{second_branch}"})}),(0,r.jsx)(t.td,{children:"Show commits on first branch that are not on the second one"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git log --follow {file}"})}),(0,r.jsx)(t.td,{children:"Show the commits that changed a file"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git show {commit_sha}"})}),(0,r.jsx)(t.td,{children:"Show a commit object details"})]})]})]}),(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"update",children:"Update"}),(0,r.jsx)(t.p,{children:"Retrieve updates from repositories and push changes."}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git remote -v"})}),(0,r.jsx)(t.td,{children:"View all remote for a Git repository"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git remote add {name} {url}"})}),(0,r.jsx)(t.td,{children:"Add a remote for a Git repository"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git remote rename {remote_name} {new_name}"})}),(0,r.jsx)(t.td,{children:"Renames a remote for a Git repository"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git remote remove {remote_name}"})}),(0,r.jsx)(t.td,{children:"Remove a remote for a git repository"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git fetch {remote_name}"})}),(0,r.jsx)(t.td,{children:"Fetch all branches from Git remote"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git pull"})}),(0,r.jsx)(t.td,{children:"Pull commits from remote"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git merge {branch}"})}),(0,r.jsx)(t.td,{children:"Merge specified branch into current branch"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git merge --abort"})}),(0,r.jsx)(t.td,{children:"Rollback to pre-merge state"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git push"})}),(0,r.jsx)(t.td,{children:"Push active branch commits to remote"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git push -u {remote_name} {current_branch}"})}),(0,r.jsx)(t.td,{children:"Push local branch commits that does not have upstream to remote"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git push {remote_name} {current_branch}:{branch}"})}),(0,r.jsx)(t.td,{children:"Push local branch commits to another branch"})]})]})]}),(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"rewrite",children:"Rewrite"}),(0,r.jsx)(t.p,{children:"Rewrite commits history."}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git rebase {branch}"})}),(0,r.jsx)(t.td,{children:"Apply commits from specified branch ahead of current branch"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git reset --hard HEAD~{number_of_commits}"})}),(0,r.jsx)(t.td,{children:"Reset commits going back to a number of commits before HEAD (destroy changes)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git reset --soft HEAD~{number_of_commits}"})}),(0,r.jsx)(t.td,{children:"Reset commits going back to a number of commits before HEAD (keep changes)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git reset --hard {commit_sha}"})}),(0,r.jsx)(t.td,{children:"Reset commits going back to a specific commit (destroy changes)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git reset --soft {commit_sha}"})}),(0,r.jsx)(t.td,{children:"Reset commits going back to a specific commit (keep changes)"})]})]})]}),(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"temporary",children:"Temporary"}),(0,r.jsx)(t.p,{children:"Temporarily store modified files"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git stash"})}),(0,r.jsx)(t.td,{children:"Save modifications for later use and rollback to last the last commit"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git stash list"})}),(0,r.jsx)(t.td,{children:"List saved stashes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git stash pop"})}),(0,r.jsx)(t.td,{children:"Apply stashed changes into the current branch (discard saved stash)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git stash apply"})}),(0,r.jsx)(t.td,{children:"Apply stashed changes into the current branch (keep saved stash)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"git stash drop"})}),(0,r.jsx)(t.td,{children:"Discard saved stash"})]})]})]}),(0,r.jsx)("br",{}),(0,r.jsx)(t.h2,{id:"github",children:"GitHub"}),(0,r.jsx)(t.p,{children:"GitHub useful queries."}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Command"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"https://github.com/pulls?&q=author:%5C%7Buser%5C%7D+is:open+is:pr",children:"https://github.com/pulls?&q=author:\\{user\\}+is:open+is:pr"})})}),(0,r.jsx)(t.td,{children:"See all open pull requests of a user on Github"})]})})]})]}),(0,r.jsx)(a.Z,{value:"Navi Cheat",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"% Git\n;; Cheat sheet for Git commands.\n\n$ file: find . | awk '{print $NF}'\n$ branch: git branch | awk '{print $NF}'\n$ commit_sha: git log --pretty=format:'%<(10)%h %<(20)%an %s' --- --column 1\n\n% Git > Config\n;; Configure Git across all local repositories.\n\n# Set global Git user name\ngit config --global user.name <name>\n\n# Set global Git user email\ngit config --global user.email <email>\n\n# Set automatic Git CLI coloring\ngit config --global color.ui auto\n\n\n% Git > Setup\n;; Initialize and clone repositories.\n\n# Initialize a Git repository\ngit init\n\n# Clone a Git repository default branch to current directory\ngit clone <repository>\n\n# Clone a Git repository branch\ngit clone -b <branch_name> <repository> <clone_directory>\n\n# Get local repository top level directory\ngit rev-parse --show-toplevel\n\n\n% Git > Stage & Changes\n@ Git\n;; Work with stage and unstaged changes.\n\n# Show modified and staged files\ngit status\n\n# Stage all files\ngit add .\n\n# Stage a file\ngit add <file>\n\n# Unstage a file\ngit reset <file>\n\n# Unstage all files\ngit reset .\n\n# Show diff of unstaged files\ngit diff\n\n# Show diff of staged files\ngit diff --staged\n\n# Commit staged changes\ngit commit -m <message>\n\n# Commit staged changes modifying the author date\ngit commit --date=\"<date>\" -m \"<message>\"\n\n\n% Git > Branch\n@ Git\n;; Work with branches\n\n# List branches\ngit branch\n\n# Create a new branch at the current commit\ngit branch <name>\n\n# Switch to another branch\ngit checkout <branch>\n\n\n% Git > Log & Compare\n@ Git\n;; View logs and diffs in branches.\n\n# Show commit history for active branch\ngit log\n\n# Show commits on first branch that are not on the second one\ngit log <branch>..<second_branch>\n\n# Show the commits that changed a file\ngit log --follow <file>\n\n# Show a commit object details\ngit show <commit_sha>\n\n$ second_branch: git branch | awk '{print $NF}'\n\n\n% Git > Update\n@ Git\n;; Retrieve updates from repositories and push changes.\n\n# View all remote for a Git repository\ngit remote -v\n\n# Add a remote for a Git repository\ngit remote add <name> <url>\n\n# Renames a remote for a Git repository\ngit remote rename <remote_name> <new_name>\n\n# Remove a remote for a git repository\ngit remote remove <remote_name>\n\n# Fetch all branches from Git remote\ngit fetch <remote_name>\n\n# Pull commits from remote\ngit pull\n\n# Merge specified branch into current branch\ngit merge <branch>\n\n# Rollback to pre-merge state\ngit merge --abort\n\n# Push active branch commits to remote\ngit push\n\n# Push local branch commits that does not have upstream to remote\ngit push -u <remote_name> <current_branch>\n\n# Push local branch commits to another branch\ngit push <remote_name> <current_branch>:<branch>\n\n$ remote_name: git remote | awk '{print $NF}'\n$ remote_branch: git branch -r | awk '{print $NF}'\n$ current_branch: git branch --show-current\n$ destination_branch: \n\n\n% Git > Rewrite\n@ Git\n;; Rewrite commits history.\n\n# Apply commits from specified branch ahead of current branch\ngit rebase <branch>\n\n# Reset commits going back to a number of commits before HEAD (destroy changes)\ngit reset --hard HEAD~<number_of_commits>\n\n# Reset commits going back to a number of commits before HEAD (keep changes)\ngit reset --soft HEAD~<number_of_commits>\n\n# Reset commits going back to a specific commit (destroy changes)\ngit reset --hard <commit_sha>\n\n# Reset commits going back to a specific commit (keep changes)\ngit reset --soft <commit_sha>\n\n\n% Git > Temporary\n;; Temporarily store modified files\n\n# Save modifications for later use and rollback to last the last commit\ngit stash\n\n# List saved stashes\ngit stash list\n\n# Apply stashed changes into the current branch (discard saved stash)\ngit stash pop\n\n# Apply stashed changes into the current branch (keep saved stash)\ngit stash apply\n\n# Discard saved stash\ngit stash drop\n\n\n% Git > GitHub\n;; GitHub useful queries.\n\n# See all open pull requests of a user on Github\nnavi fn url::open 'https://github.com/pulls?&q=author:<user>+is:open+is:pr'\n\n"})})})]})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>a});n(7294);var r=n(512);const s={tabItem:"tabItem_Ymn6"};var i=n(5893);function a(e){let{children:t,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,a),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7294),s=n(512),i=n(2466),a=n(6550),c=n(469),o=n(1980),l=n(7392),d=n(12);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const s=(0,a.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,i=m(e),[a,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[l,h]=g({queryString:n,groupId:s}),[x,j]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,i]=(0,d.Nk)(n);return[s,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:s}),b=(()=>{const e=l??x;return u({value:e,tabValues:i})?e:null})();(0,c.Z)((()=>{b&&o(b)}),[b]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var p=n(5893);function f(e){let{className:t,block:n,selectedValue:r,selectValue:a,tabValues:c}=e;const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=o.indexOf(t),s=c[n].value;s!==r&&(l(t),a(s))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,p.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t),children:c.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,p.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>o.push(e),onKeyDown:h,onClick:d,...i,className:(0,s.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:s}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,p.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function y(e){const t=x(e);return(0,p.jsxs)("div",{className:(0,s.Z)("tabs-container",b.tabList),children:[(0,p.jsx)(f,{...e,...t}),(0,p.jsx)(v,{...e,...t})]})}function w(e){const t=(0,j.Z)();return(0,p.jsx)(y,{...e,children:h(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>a});var r=n(7294);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);