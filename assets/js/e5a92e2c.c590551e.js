"use strict";(self.webpackChunkdifranca=self.webpackChunkdifranca||[]).push([[57],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6118:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),l=["components"],o={keywords:["software","architecture","code","reuse","shared","library","service","sidecar","mesh"],title:"Code Reuse | Software | Architecture | Tech-Notes",description:"There are several ways in which common components can be shared, especially in distributed architectures.",sidebar_label:"Code Reuse"},c="Code Reuse",s={unversionedId:"architecture/software/code-reuse",id:"architecture/software/code-reuse",title:"Code Reuse | Software | Architecture | Tech-Notes",description:"There are several ways in which common components can be shared, especially in distributed architectures.",source:"@site/docs/tech/architecture/software/code-reuse.md",sourceDirName:"architecture/software",slug:"/architecture/software/code-reuse",permalink:"/tech-notes/architecture/software/code-reuse",draft:!1,editUrl:"https://github.com/difranca/difranca.github.io/blob/main/docs/tech/architecture/software/code-reuse.md",tags:[],version:"current",frontMatter:{keywords:["software","architecture","code","reuse","shared","library","service","sidecar","mesh"],title:"Code Reuse | Software | Architecture | Tech-Notes",description:"There are several ways in which common components can be shared, especially in distributed architectures.",sidebar_label:"Code Reuse"},sidebar:"tech",previous:{title:"Software",permalink:"/tech-notes/architecture/software"},next:{title:"Programming Languages",permalink:"/tech-notes/languages"}},u={},d=[{value:"Code Replication",id:"code-replication",level:2},{value:"Shared Library",id:"shared-library",level:2},{value:"Shared Service",id:"shared-service",level:2},{value:"Sidecar",id:"sidecar",level:2}],p={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"code-reuse"},"Code Reuse"),(0,i.kt)("p",null,"Common business domain and infrastructure functionalities are typically shared across multiple components."),(0,i.kt)("p",null,"There are several ways in which these components can be shared, especially in distributed architectures."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"More Information")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.thoughtworks.com/en-br/insights/books/software-architecture-hard-parts"},"https://www.thoughtworks.com/en-br/insights/books/software-architecture-hard-parts"))))),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"code-replication"},"Code Replication"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Shared code is copied into each service"),(0,i.kt)("li",{parentName:"ul"},"Recommended to use it only in exceptional cases")),(0,i.kt)("p",null,"Advantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Preserves the bounded context")),(0,i.kt)("p",null,"Disadvantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Difficult to apply code changes"),(0,i.kt)("li",{parentName:"ul"},"Code inconsistency across services"),(0,i.kt)("li",{parentName:"ul"},"No versioning capabilities across services")),(0,i.kt)("p",null,"Useful for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Simple static code")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"shared-library"},"Shared Library"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Code is shared in an external artifact (library)"),(0,i.kt)("li",{parentName:"ul"},"Typically bound to the service at compile time")),(0,i.kt)("p",null,"Dependency Management:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sharing code into big common libraries (coarse-grained) is easier for dependency management, but it is not good for change control and maintainability"),(0,i.kt)("li",{parentName:"ul"},"Breaking shared code into small functionality-based libraries (fine-grained) is better for change control and maintainability, but makes dependencies management difficult"),(0,i.kt)("li",{parentName:"ul"},"It is generally recommended to favor change control over dependency management")),(0,i.kt)("p",null,"Versioning:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Always use versioning"),(0,i.kt)("li",{parentName:"ul"},"Version changes must be coordinated and communicated"),(0,i.kt)("li",{parentName:"ul"},"Create a deprecation strategy"),(0,i.kt)("li",{parentName:"ul"},"Serious defects or breaking changes to shared code causes all services to adopt the latest version of a shared library at once"),(0,i.kt)("li",{parentName:"ul"},"Avoid the use of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LATEST")," version in service requirements")),(0,i.kt)("p",null,"Advantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ability to version change"),(0,i.kt)("li",{parentName:"ul"},"Shared code is compile-based, reducing runtime errors"),(0,i.kt)("li",{parentName:"ul"},"Operational characteristics (e.g. performance, scalability, fault tolerance) are not impacted"),(0,i.kt)("li",{parentName:"ul"},"Risk of breaking other services with a change to common code is low because of versioning")),(0,i.kt)("p",null,"Disadvantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Dependencies can be difficult to manage"),(0,i.kt)("li",{parentName:"ul"},"Code duplication in heterogeneous codebases"),(0,i.kt)("li",{parentName:"ul"},"Version deprecation and communication can be difficult")),(0,i.kt)("p",null,"Useful for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Homogeneous environments where shared code change is low")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"shared-service"},"Shared Service"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Places shared functionality in a separately deployed service")),(0,i.kt)("p",null,"Versioning:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use API endpoint versioning for RESTful APIs"),(0,i.kt)("li",{parentName:"ul"},"May be harder to implement for other protocols (e.g. gRPC, messaging)")),(0,i.kt)("p",null,"Performance:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Adds network latency"),(0,i.kt)("li",{parentName:"ul"},"Use of gRPC and messaging can help mitigate some of the performance issues")),(0,i.kt)("p",null,"Advantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Good for high code volatility"),(0,i.kt)("li",{parentName:"ul"},"No code duplication in heterogeneous codebases"),(0,i.kt)("li",{parentName:"ul"},"Preserves the bounded context"),(0,i.kt)("li",{parentName:"ul"},"No static code sharing")),(0,i.kt)("p",null,"Disadvantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Versioning changes can be difficult"),(0,i.kt)("li",{parentName:"ul"},"Performance is impacted due to latency"),(0,i.kt)("li",{parentName:"ul"},"Fault tolerance and availability issues due to service dependency"),(0,i.kt)("li",{parentName:"ul"},"Scalability and throughput issues due to service dependency"),(0,i.kt)("li",{parentName:"ul"},"Increased risk due to runtime changes")),(0,i.kt)("p",null,"Useful for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Highly polyglot environments"),(0,i.kt)("li",{parentName:"ul"},"When shared functionality tends to change often")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"sidecar"},"Sidecar"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Decouples the domain logic from the technical logic"),(0,i.kt)("li",{parentName:"ul"},"Same principles may be applied to service mesh")),(0,i.kt)("p",null,"Advantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Consistent way to create isolated coupling"),(0,i.kt)("li",{parentName:"ul"},"Consistent infrastructure coordination")),(0,i.kt)("p",null,"Disadvantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sidecar component may grow large/complex")),(0,i.kt)("p",null,"Useful for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Operational coupling")))}m.isMDXComponent=!0}}]);