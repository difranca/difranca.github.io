"use strict";(self.webpackChunkdifranca=self.webpackChunkdifranca||[]).push([[684],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return u}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),m=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=m(t.components);return n.createElement(s.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),d=m(a),u=r,g=d["".concat(s,".").concat(u)]||d[u]||c[u]||l;return a?n.createElement(g,i(i({ref:e},p),{},{components:a})):n.createElement(g,i({ref:e},p))}));function u(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2360:function(t,e,a){a.d(e,{Z:function(){return i}});var n=a(7294),r=a(6010),l="tabItem_OmH5";function i(t){var e=t.children,a=t.hidden,i=t.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},e)}},9877:function(t,e,a){a.d(e,{Z:function(){return u}});var n=a(7462),r=a(7294),l=a(2389),i=a(7392),o=a(7094),s=a(2466),m=a(6010),p="tabList_uSqn",c="tabItem_LplD";function d(t){var e,a,l,d=t.lazy,u=t.block,g=t.defaultValue,h=t.values,k=t.groupId,b=t.className,N=r.Children.map(t.children,(function(t){if((0,r.isValidElement)(t)&&void 0!==t.props.value)return t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof t.type?t.type:t.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=h?h:N.map((function(t){var e=t.props;return{value:e.value,label:e.label,attributes:e.attributes}})),v=(0,i.l)(f,(function(t,e){return t.value===e.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(t){return t.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===g?g:null!=(e=null!=g?g:null==(a=N.find((function(t){return t.props.default})))?void 0:a.props.value)?e:null==(l=N[0])?void 0:l.props.value;if(null!==y&&!f.some((function(t){return t.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((function(t){return t.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,o.U)(),G=w.tabGroupChoices,C=w.setTabGroupChoices,S=(0,r.useState)(y),_=S[0],D=S[1],O=[],T=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var E=G[k];null!=E&&E!==_&&f.some((function(t){return t.value===E}))&&D(E)}var R=function(t){var e=t.currentTarget,a=O.indexOf(e),n=f[a].value;n!==_&&(T(e),D(n),null!=k&&C(k,n))},P=function(t){var e,a=null;switch(t.key){case"ArrowRight":var n=O.indexOf(t.currentTarget)+1;a=O[n]||O[0];break;case"ArrowLeft":var r=O.indexOf(t.currentTarget)-1;a=O[r]||O[O.length-1]}null==(e=a)||e.focus()};return r.createElement("div",{className:(0,m.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,m.Z)("tabs",{"tabs--block":u},b)},f.map((function(t){var e=t.value,a=t.label,l=t.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===e?0:-1,"aria-selected":_===e,key:e,ref:function(t){return O.push(t)},onKeyDown:P,onFocus:R,onClick:R},l,{className:(0,m.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":_===e})}),null!=a?a:e)}))),d?(0,r.cloneElement)(N.filter((function(t){return t.props.value===_}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},N.map((function(t,e){return(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==_})}))))}function u(t){var e=(0,l.Z)();return r.createElement(d,(0,n.Z)({key:String(e)},t))}},9704:function(t,e,a){a.r(e),a.d(e,{assets:function(){return d},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return m},metadata:function(){return c},toc:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=a(9877),o=a(2360),s=["components"],m={keywords:["cheat","sheet","cheatsheet","cheats","devsecops","git"],slug:"/cheats/devsecops/git",title:"Git | DevSecOps | Cheat Sheets | Tech-Notes",sidebar_label:"Git Cheats"},p="Git Cheats",c={unversionedId:"cheats/DevSecOps/git",id:"cheats/DevSecOps/git",title:"Git | DevSecOps | Cheat Sheets | Tech-Notes",description:"Cheat sheet for Git commands.",source:"@site/docs/tech/cheats/DevSecOps/git.md",sourceDirName:"cheats/DevSecOps",slug:"/cheats/devsecops/git",permalink:"/tech-notes/cheats/devsecops/git",draft:!1,editUrl:"https://github.com/difranca/difranca.github.io/blob/main/docs/tech/cheats/DevSecOps/git.md",tags:[],version:"current",frontMatter:{keywords:["cheat","sheet","cheatsheet","cheats","devsecops","git"],slug:"/cheats/devsecops/git",title:"Git | DevSecOps | Cheat Sheets | Tech-Notes",sidebar_label:"Git Cheats"},sidebar:"tech",previous:{title:"Cheat Sheets",permalink:"/tech-notes/cheats"},next:{title:"Kubectl Cheats",permalink:"/tech-notes/cheats/kubernetes/kubectl"}},d={},u=[{value:"Config",id:"config",level:2},{value:"Setup",id:"setup",level:2},{value:"Stage &amp; Changes",id:"stage--changes",level:2},{value:"Branch",id:"branch",level:2},{value:"Log &amp; Compare",id:"log--compare",level:2},{value:"Update",id:"update",level:2},{value:"Rewrite",id:"rewrite",level:2},{value:"Temporary",id:"temporary",level:2},{value:"GitHub",id:"github",level:2}],g={toc:u};function h(t){var e=t.components,a=(0,r.Z)(t,s);return(0,l.kt)("wrapper",(0,n.Z)({},g,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"git-cheats"},"Git Cheats"),(0,l.kt)("p",null,"Cheat sheet for Git commands."),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"This page was automatically generated from a navi cheat file available at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/difranca/navi-cheats"},(0,l.kt)("strong",{parentName:"a"},"difranca/navi-cheats")),".",(0,l.kt)("br",null),"\n",(0,l.kt)("strong",{parentName:"p"},"Navi")," is an interactive cheatsheet tool for the command-line. To learn more about it, visit ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/denisidoro/navi"},(0,l.kt)("strong",{parentName:"a"},"denisidoro/navi")),"."))),(0,l.kt)(i.Z,{className:"unique-tabs",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"Table Formatted",default:!0,mdxType:"TabItem"},(0,l.kt)("br",null),(0,l.kt)("h2",{id:"config"},"Config"),(0,l.kt)("p",null,"Configure Git across all local repositories."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git config --global user.name {name}")),(0,l.kt)("td",{parentName:"tr",align:null},"Set global Git user name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git config --global user.email {email}")),(0,l.kt)("td",{parentName:"tr",align:null},"Set global Git user email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git config --global color.ui auto")),(0,l.kt)("td",{parentName:"tr",align:null},"Set automatic Git CLI coloring")))),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"setup"},"Setup"),(0,l.kt)("p",null,"Initialize and clone repositories."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git init")),(0,l.kt)("td",{parentName:"tr",align:null},"Initialize a Git repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git clone {repository}")),(0,l.kt)("td",{parentName:"tr",align:null},"Clone a Git repository default branch to current directory")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git clone -b {branch_name} {repository} {clone_directory}")),(0,l.kt)("td",{parentName:"tr",align:null},"Clone a Git repository branch")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git rev-parse --show-toplevel")),(0,l.kt)("td",{parentName:"tr",align:null},"Get local repository top level directory")))),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"stage--changes"},"Stage & Changes"),(0,l.kt)("p",null,"Work with stage and unstaged changes."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git status")),(0,l.kt)("td",{parentName:"tr",align:null},"Show modified and staged files")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git add .")),(0,l.kt)("td",{parentName:"tr",align:null},"Stage all files")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git add {file}")),(0,l.kt)("td",{parentName:"tr",align:null},"Stage a file")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git reset {file}")),(0,l.kt)("td",{parentName:"tr",align:null},"Unstage a file")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git reset .")),(0,l.kt)("td",{parentName:"tr",align:null},"Unstage all files")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git diff")),(0,l.kt)("td",{parentName:"tr",align:null},"Show diff of unstaged files")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git diff --staged")),(0,l.kt)("td",{parentName:"tr",align:null},"Show diff of staged files")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git commit -m {message}")),(0,l.kt)("td",{parentName:"tr",align:null},"Commit staged changes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},'git commit --date="{date}" -m "{message}"')),(0,l.kt)("td",{parentName:"tr",align:null},"Commit staged changes modifying the author date")))),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"branch"},"Branch"),(0,l.kt)("p",null,"Work with branches"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git branch")),(0,l.kt)("td",{parentName:"tr",align:null},"List branches")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git branch {name}")),(0,l.kt)("td",{parentName:"tr",align:null},"Create a new branch at the current commit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git checkout {branch}")),(0,l.kt)("td",{parentName:"tr",align:null},"Switch to another branch")))),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"log--compare"},"Log & Compare"),(0,l.kt)("p",null,"View logs and diffs in branches."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git log")),(0,l.kt)("td",{parentName:"tr",align:null},"Show commit history for active branch")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git log {branch}..{second_branch}")),(0,l.kt)("td",{parentName:"tr",align:null},"Show commits on first branch that are not on the second one")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git log --follow {file}")),(0,l.kt)("td",{parentName:"tr",align:null},"Show the commits that changed a file")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git show {commit_sha}")),(0,l.kt)("td",{parentName:"tr",align:null},"Show a commit object details")))),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"update"},"Update"),(0,l.kt)("p",null,"Retrieve updates from repositories and push changes."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git remote -v")),(0,l.kt)("td",{parentName:"tr",align:null},"View all remote for a Git repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git remote add {name} {url}")),(0,l.kt)("td",{parentName:"tr",align:null},"Add a remote for a Git repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git remote rename {remote_name} {new_name}")),(0,l.kt)("td",{parentName:"tr",align:null},"Renames a remote for a Git repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git remote remove {remote_name}")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove a remote for a git repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git fetch {remote_name}")),(0,l.kt)("td",{parentName:"tr",align:null},"Fetch all branches from Git remote")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git pull")),(0,l.kt)("td",{parentName:"tr",align:null},"Pull commits from remote")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git merge {branch}")),(0,l.kt)("td",{parentName:"tr",align:null},"Merge specified branch into current branch")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git merge --abort")),(0,l.kt)("td",{parentName:"tr",align:null},"Rollback to pre-merge state")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git push")),(0,l.kt)("td",{parentName:"tr",align:null},"Push active branch commits to remote")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git push -u {remote_name} {current_branch}")),(0,l.kt)("td",{parentName:"tr",align:null},"Push local branch commits that does not have upstream to remote")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git push {remote_name} {current_branch}:{branch}")),(0,l.kt)("td",{parentName:"tr",align:null},"Push local branch commits to another branch")))),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"rewrite"},"Rewrite"),(0,l.kt)("p",null,"Rewrite commits history."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git rebase {branch}")),(0,l.kt)("td",{parentName:"tr",align:null},"Apply commits from specified branch ahead of current branch")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git reset --hard HEAD~{number_of_commits}")),(0,l.kt)("td",{parentName:"tr",align:null},"Reset commits going back to a number of commits before HEAD (destroy changes)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git reset --soft HEAD~{number_of_commits}")),(0,l.kt)("td",{parentName:"tr",align:null},"Reset commits going back to a number of commits before HEAD (keep changes)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git reset --hard {commit_sha}")),(0,l.kt)("td",{parentName:"tr",align:null},"Reset commits going back to a specific commit (destroy changes)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git reset --soft {commit_sha}")),(0,l.kt)("td",{parentName:"tr",align:null},"Reset commits going back to a specific commit (keep changes)")))),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"temporary"},"Temporary"),(0,l.kt)("p",null,"Temporarily store modified files"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git stash")),(0,l.kt)("td",{parentName:"tr",align:null},"Save modifications for later use and rollback to last the last commit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git stash list")),(0,l.kt)("td",{parentName:"tr",align:null},"List saved stashes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git stash pop")),(0,l.kt)("td",{parentName:"tr",align:null},"Apply stashed changes into the current branch (discard saved stash)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git stash apply")),(0,l.kt)("td",{parentName:"tr",align:null},"Apply stashed changes into the current branch (keep saved stash)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git stash drop")),(0,l.kt)("td",{parentName:"tr",align:null},"Discard saved stash")))),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"github"},"GitHub"),(0,l.kt)("p",null,"GitHub useful queries."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"https://github.com/pulls?&q=author:%7Buser%7D+is:open+is:pr"},"https://github.com/pulls?&q=author:{user}+is:open+is:pr"))),(0,l.kt)("td",{parentName:"tr",align:null},"See all open pull requests of a user on Github"))))),(0,l.kt)(o.Z,{value:"Navi Cheat",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"% Git\n;; Cheat sheet for Git commands.\n\n$ file: find . | awk '{print $NF}'\n$ branch: git branch | awk '{print $NF}'\n$ commit_sha: git log --pretty=format:'%<(10)%h %<(20)%an %s' --- --column 1\n\n% Git > Config\n;; Configure Git across all local repositories.\n\n# Set global Git user name\ngit config --global user.name <name>\n\n# Set global Git user email\ngit config --global user.email <email>\n\n# Set automatic Git CLI coloring\ngit config --global color.ui auto\n\n\n% Git > Setup\n;; Initialize and clone repositories.\n\n# Initialize a Git repository\ngit init\n\n# Clone a Git repository default branch to current directory\ngit clone <repository>\n\n# Clone a Git repository branch\ngit clone -b <branch_name> <repository> <clone_directory>\n\n# Get local repository top level directory\ngit rev-parse --show-toplevel\n\n\n% Git > Stage & Changes\n@ Git\n;; Work with stage and unstaged changes.\n\n# Show modified and staged files\ngit status\n\n# Stage all files\ngit add .\n\n# Stage a file\ngit add <file>\n\n# Unstage a file\ngit reset <file>\n\n# Unstage all files\ngit reset .\n\n# Show diff of unstaged files\ngit diff\n\n# Show diff of staged files\ngit diff --staged\n\n# Commit staged changes\ngit commit -m <message>\n\n# Commit staged changes modifying the author date\ngit commit --date=\"<date>\" -m \"<message>\"\n\n\n% Git > Branch\n@ Git\n;; Work with branches\n\n# List branches\ngit branch\n\n# Create a new branch at the current commit\ngit branch <name>\n\n# Switch to another branch\ngit checkout <branch>\n\n\n% Git > Log & Compare\n@ Git\n;; View logs and diffs in branches.\n\n# Show commit history for active branch\ngit log\n\n# Show commits on first branch that are not on the second one\ngit log <branch>..<second_branch>\n\n# Show the commits that changed a file\ngit log --follow <file>\n\n# Show a commit object details\ngit show <commit_sha>\n\n$ second_branch: git branch | awk '{print $NF}'\n\n\n% Git > Update\n@ Git\n;; Retrieve updates from repositories and push changes.\n\n# View all remote for a Git repository\ngit remote -v\n\n# Add a remote for a Git repository\ngit remote add <name> <url>\n\n# Renames a remote for a Git repository\ngit remote rename <remote_name> <new_name>\n\n# Remove a remote for a git repository\ngit remote remove <remote_name>\n\n# Fetch all branches from Git remote\ngit fetch <remote_name>\n\n# Pull commits from remote\ngit pull\n\n# Merge specified branch into current branch\ngit merge <branch>\n\n# Rollback to pre-merge state\ngit merge --abort\n\n# Push active branch commits to remote\ngit push\n\n# Push local branch commits that does not have upstream to remote\ngit push -u <remote_name> <current_branch>\n\n# Push local branch commits to another branch\ngit push <remote_name> <current_branch>:<branch>\n\n$ remote_name: git remote | awk '{print $NF}'\n$ remote_branch: git branch -r | awk '{print $NF}'\n$ current_branch: git branch --show-current\n$ destination_branch: \n\n\n% Git > Rewrite\n@ Git\n;; Rewrite commits history.\n\n# Apply commits from specified branch ahead of current branch\ngit rebase <branch>\n\n# Reset commits going back to a number of commits before HEAD (destroy changes)\ngit reset --hard HEAD~<number_of_commits>\n\n# Reset commits going back to a number of commits before HEAD (keep changes)\ngit reset --soft HEAD~<number_of_commits>\n\n# Reset commits going back to a specific commit (destroy changes)\ngit reset --hard <commit_sha>\n\n# Reset commits going back to a specific commit (keep changes)\ngit reset --soft <commit_sha>\n\n\n% Git > Temporary\n;; Temporarily store modified files\n\n# Save modifications for later use and rollback to last the last commit\ngit stash\n\n# List saved stashes\ngit stash list\n\n# Apply stashed changes into the current branch (discard saved stash)\ngit stash pop\n\n# Apply stashed changes into the current branch (keep saved stash)\ngit stash apply\n\n# Discard saved stash\ngit stash drop\n\n\n% Git > GitHub\n;; GitHub useful queries.\n\n# See all open pull requests of a user on Github\nnavi fn url::open 'https://github.com/pulls?&q=author:<user>+is:open+is:pr'\n\n")))))}h.isMDXComponent=!0}}]);